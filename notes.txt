BLOG API 

MUST

* Guardar el JWT en una cookie --> Mandar el JWT en cada petición
* Función refreshToken 
* Documentar endpoints
   estado de login: guardar (en una cookie) la sesión del usuario con los Tokens

* Middleware para el despliegue de información de errores
* Crear SEED para crear datos
* IMplemenar PM2 para microservicios


Mostrar enums en una B.D´s de postgres
select n.nspname as enum_schema,  
       t.typname as enum_name,  
       e.enumlabel as enum_value
from pg_type t 
   join pg_enum e on t.oid = e.enumtypid  
   join pg_catalog.pg_namespace n ON n.oid = t.typnamespace


//DUDA: Los blogger y los user_blogger siempretendrán el mimso ID? o habrá casos en los que no 
//El método PUT sólo actualiza un campo a la vez
//Consideración para escalar la aplicación: Implementar pool connections para ma

Tareas para los D.B.A´s:
1.- Crear triggers para cuando se haga algún delete
2.- Crear la tabla que guarde la información generada por el trigger
3.- Manejar que en la D.B. se ingrese los datos de tipo fecha automáticamente. http://localhost:3000/api/blogger/
4.- Agregar los delete on cascade 


---Usuarios de prueba---
//role: NORMAL
{
	"email": "testuser@gmail.com",
	"password": "TestUser12$",
}
{
	"email": "testuser3@gmail.com",
	"password": "TestUser3$",
}

//role: ADMIN
{
	"email": "testuser2@gmail.com",
	"password": "TestUser12$",
}
	{
		"id_blogger": 1,
		"name": "testuser2@gmail.com",
		"first_username": "TestUser12$",
		"second_username": "ADMIN",
		"id_career": 1,
		"id_user_blogger": 4
	}

